col = "steelblue" ,
freq = F,
breaks = 70)
# overlay the theoretical distribution of sample averages on top of the histogram
curve(dnorm(x, mean= 0, sd = SE_Diff),
col = "red",
lwd = "2",
add = T)
library(fastGraph)
par( mfrow=c(1,1) )
shadeDist(c( -3.29, 3.29 ), "dt", 38, 0, lower.tail=TRUE ) # t with 15 d.f. and non-centrality parameter=0
#shadeDist( c( -1.3, 1.3 ), "dt", 13 ) # t with 13 d.f.
par( mfrow=c(1,1) )
library(fastGraph)
par( mfrow=c(1,1) )
shadeDist(c( -2.02439416391197, 2.02439416391197), "dt", 38, 0, lower.tail=TRUE ) # t with 15 d.f. and non-centrality parameter=0
#shadeDist( c( -1.3, 1.3 ), "dt", 13 ) # t with 13 d.f.
#shadeDist( qt(0.025,38), "dt", 38, 0, lower.tail=TRUE )
par( mfrow=c(1,1) )
library(ggplot2)
library(showtext)
#font_add_google("Poppins", "Poppins")
#font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
Mnv <- 1.04
SEnv <- 0.34
halfCI_nv <- SEnv * 1.96
data <- data.frame(cond, value)
# create a theme to handle the design
myTheme <- theme(plot.title = element_text(face="bold", size = 22),
axis.title.x = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 20),
axis.text.x = element_text(size = 18, angle = 45, hjust = 1),
axis.text.y = element_text(size = 18, angle = 0),
legend.text = element_text(size = 18),
legend.title = element_text(face = "bold", size = 18),
strip.text.x = element_text(size = 18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.text = element_text(colour ="black"),
axis.ticks = element_line(colour ="black"))
theme_set(theme_light(base_size = 20, base_family = "Poppins"))
barchart <- ggplot()+
myTheme+
#guides(fill=FALSE)+
#facet_wrap(~Latency + SampleSize, ncol=2)+
ggtitle("Cohen's d und 95% KI") +
#coord_cartesian(ylim=c(-0.1,2)) +
scale_y_continuous(limits = c(-2, 2), breaks=seq(-2, 2, 0.25), expand = c(0,0)) +
scale_x_discrete(labels=c("wc = 1.0","wc = .50")) +
#annotate("rect", xmin=1.7, xmax=2.3, ymin=0.95, ymax=1.05, color="#31a354", fill = "white", size = 1) +
#stat_summary(fun.y=mean, colour="grey20", geom="point", shape = 21, size = 3)+
stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black")+
#stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.2) +
#geom_jitter(width = 0.3, height = 0.02, alpha = 0.6, colour = "red") +
#ggtitle("Means (95% bootstr. CIs)") +
#theme(axis.text.x = element_text(size = 10, angle = 0, hjust = 0.5))+
labs(x= "Effektgröße", y = "Cohen's d") +
#scale_color_manual(values=c("#005083",  "#f0b64d"))# +
#scale_fill_manual(values=c("#969696",  "#969696"))
#annotate("point", x = 1, y = 100, colour = "firebrick", size = 2)+
annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")+
annotate("pointrange", x = 1, y = Mnv, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, colour = "darkgreen", size = 0.8, shape = 15)
#annotate("pointrange", x = 2, y = Mv, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, colour = "blue", size = 0.8, shape = 15)+
#annotate("text", x = 0.5, y = 290, family = "Poppins", size = 6, color = "gray20", label = "nicht-vegan")+
#geom_curve(aes(x = 0.5, y = 285, xend = 0.9, yend = 255),arrow = arrow(length = unit(0.03, "npc")),color = "gray20", curvature = +0.2)+
#annotate("text", x = 1.5, y = 180, family = "Poppins", size = 6, color = "gray20", label = "vegan")+
#geom_curve(aes(x = 1.5, y = 185, xend = 1.9, yend = 212),arrow = arrow(length = unit(0.03, "npc")),color = "gray20", curvature = -0.2)
barchart
library(ggplot2)
library(plyr)
library(pastecs)
library(data.table)
library(overlapping) # to compute the
library(tidyr)
library(showtext)
library(reshape2)
library(reshape)
N = 100 # define a large N on which the simulation is based
set.seed(123)
###################################################################################
# expected data for the condition event = "expected"
# create a correlation for the expected group (correlation is required because we have a repeated-measure factor [LI])
samples = N
r = 0.7
z1 <- rnorm(samples, 0, 1) # draw standardized values from a normal distribution
z2 <- rnorm(samples, 0, 1)
Mean_Lat_BE <- 250 # define an assumed population parameter for the LI before the event (BE) (this value is based on the pilot study from 2019)
SD_Lat_BE <- 40 # define an assumed population parameter for the SD of LI before the event (this value is also based on the pilot study from 2019)
Mean_Lat_AE <- 220 # (same values are used for LI after the event because we are simulating the results for the "expected" event)
SD_Lat_AE <- 40
Chol_1 <- Mean_Lat_BE + SD_Lat_BE * z1 # create standardized and normally distributed LIs before the event
Chol_2 <- Mean_Lat_AE + SD_Lat_AE * (z1 * r + z2 * (1 - r^2)^0.5) # create standardized and normally distributed LIs after the event and ensure that we obtain the defined correlation of BE and AE of r = 0.5
sID <- (1:samples)
group <- rep("Wechsel zu vegan", samples)
dataFrame <- data.frame(sID, group, Chol_1, Chol_2)
#cor(dataFrame$Chol_1, dataFrame$Chol_2)
# expected data for the condition event = "unexpected"
set.seed(456)
# create a correlation for the unexpected group
samples2 = samples
r = 0.8
z1 <- rnorm(samples, 0, 1) # draw standardized values from a normal distribution
z2 <- rnorm(samples, 0, 1)
Mean_Lat_BE <- 250 # define an assumed population parameter for the LI before the event (BE) (this value is based on the pilot study from 2019)
SD_Lat_BE <- 40 # define an assumed population parameter for the SD of LI before the event (this value is also based on the pilot study from 2019)
Mean_Lat_AE <- 250 # (same values are used for LI after the event because we are simulating the results for the "expected" event)
SD_Lat_AE <- 40
Chol_1 <- Mean_Lat_BE + SD_Lat_BE * z1 # create standardized and normally distributed LIs before the event
Chol_2 <- Mean_Lat_AE + SD_Lat_AE * (z1 * r + z2 * (1 - r^2)^0.5) # create standardized and normally distributed LIs after the event and ensure that we obtain the defined correlation of BE and AE of r = 0.5
sID <- (101:200)
group <- rep("Reguläre Ernährung", samples)
dataFrame2 <- data.frame(sID, group, Chol_1, Chol_2)
#cor(dataFrame2$Chol_1, dataFrame2$Chol_2)
###################################################################
# merge data frames: gives a data frame with N subjects
tdata <- rbind(dataFrame, dataFrame2)
#############
#tdata <- read.delim("q1_dataFiles/chol_data.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
#head(data, 10)
#write.table(data, file = "chol_data.txt", row.names=FALSE, sep="\t", quote=FALSE, append = FALSE)
data_long <- melt(tdata, id=c("sID","group"))
data_long$variable <- factor(data_long$variable, levels = c("Chol_1", "Chol_2"))
#data_long$group <- factor(data_long$group,levels = c("change to vegan", "regular diet"),
#                          labels = c("Wechsel zu vegan", "Reguläre Ernährung"))
data_long$group <- factor(data_long$group,levels = c("Wechsel zu vegan", "Reguläre Ernährung"))
library(ggplot2)
library(showtext)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
#data <- data.frame(cond, value)
# create a theme to handle the design
myTheme <- theme(plot.title = element_text(face="bold", size = 22),
axis.title.x = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 20),
axis.text.x = element_text(size = 18, angle = 45, hjust = 1),
axis.text.y = element_text(size = 18, angle = 0),
legend.text = element_text(size = 18),
legend.title = element_text(face = "bold", size = 18),
strip.text.x = element_text(size = 18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.text = element_text(colour ="black"),
axis.ticks = element_line(colour ="black"))
## first, turn sID into a factor
data_long$sID <- factor(data_long$sID)
pd <- position_dodge(width = 0.3)
data_long$valueJitter <- jitter(data_long$value, factor = 1, amount = 0.05)
theme_set(theme_light(base_size = 25, base_family = "Poppins"))
g <- ggplot(data_long, aes(x=variable, y=value, group = sID, fill = variable)) +
guides(fill=FALSE)+
facet_grid( ~ group)+
ggtitle("Entwicklung der Cholesterinwerte") +
scale_y_continuous(limits = c(-5, 350), breaks=seq(0, 350, 25), expand = c(0,0)) +
scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(y = value,group=1), fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha = 0.3) +
stat_summary(aes(y = value,group=1), fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.2) +
geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Zeitpunkt", y = "Cholesterinwert mg/dl")
g
tdata$Diff <- tdata$Chol_2 - tdata$Chol_1
#tdata$group <- factor(tdata$group,levels = c("change to vegan", "regular diet"),
#                          labels = c("Wechsel zu vegan", "Reguläre Ernährung"))
tdata$group <- factor(tdata$group,levels = c("Wechsel zu vegan", "Reguläre Ernährung"))
theme_set(theme_light(base_size = 25, base_family = "Poppins"))
g <- ggplot(tdata, aes(x=group, y=Diff)) +
guides(fill=FALSE)+
#facet_grid( ~ group)+
ggtitle("Mittlere Veränderungen in den Bedingungen (95% KI)") +
scale_y_continuous(limits = c(-100, 80), breaks=seq(-100, 80, 10), expand = c(0,0)) +
#scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(fun.y = mean, geom = "point", position = "dodge", colour = "firebrick", alpha = 0.6, size = 3) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.05) +
#geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
#geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Bedingung", y = "Cholesterinwert Veränderung mg/dl")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")
#annotate("pointrange", x = 1, y = Mnv, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, colour = "darkgreen", size = 0.8, shape = 15)
g
g <- ggplot(tdata, aes(x=group, y=Diff)) +
guides(fill=FALSE)+
#facet_grid( ~ group)+
ggtitle("Mittlere Veränderungen in den Bedingungen (95% KI)") +
scale_y_continuous(limits = c(-100, 80), breaks=seq(-100, 80, 10), expand = c(0,0)) +
#scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(fun.y = mean, geom = "point", position = "dodge", colour = "firebrick", alpha = 0.6, size = 3) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.05) +
#geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
#geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Bedingung", y = "Cholesterinwert Veränderung mg/dl")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")
#annotate("pointrange", x = 1, y = Mnv, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, colour = "darkgreen", size = 0.8, shape = 15)
g
g <- ggplot(tdata, aes(x=group, y=Diff)) +
guides(fill=FALSE)+
#facet_grid( ~ group)+
ggtitle("Mittlere Veränderungen in den Bedingungen (95% KI)") +
scale_y_continuous(limits = c(-100, 80), breaks=seq(-100, 80, 10), expand = c(0,0)) +
#scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(fun.y = mean, geom = "point", position = "dodge", colour = "firebrick", alpha = 0.6, size = 3) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.05) +
#geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
#geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Bedingung", y = "Cholesterinwert Veränderung mg/dl")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")
#annotate("pointrange", x = 1, y = Mnv, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, colour = "darkgreen", size = 0.8, shape = 15)
g
View(tdata)
g <- ggplot(tdata, aes(x=group, y=Diff)) +
guides(fill=FALSE)+
#facet_grid( ~ group)+
ggtitle("Mittlere Veränderungen in den Bedingungen (95% KI)") +
scale_y_continuous(limits = c(-100, 80), breaks=seq(-100, 80, 10), expand = c(0,0)) +
#scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(fun.y = mean, geom = "point", position = "dodge", colour = "firebrick", alpha = 0.6, size = 3) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.05) +
#geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
#geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Bedingung", y = "Cholesterinwert Veränderung mg/dl")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")
#annotate("pointrange", x = 1, y = Mnv, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, colour = "darkgreen", size = 0.8, shape = 15)
g
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
g <- ggplot(tdata, aes(x=group, y=Diff)) +
guides(fill=FALSE)+
#facet_grid( ~ group)+
ggtitle("Mittlere Veränderungen in den Bedingungen (95% KI)") +
scale_y_continuous(limits = c(-100, 80), breaks=seq(-100, 80, 10), expand = c(0,0)) +
#scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(fun.y = mean, geom = "point", position = "dodge", colour = "firebrick", alpha = 0.6, size = 3) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.05) +
#geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
#geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Bedingung", y = "Cholesterinwert Veränderung mg/dl")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")
library(ggplot2)
g <- ggplot(tdata, aes(x=group, y=Diff)) +
guides(fill=FALSE)+
#facet_grid( ~ group)+
ggtitle("Mittlere Veränderungen in den Bedingungen (95% KI)") +
scale_y_continuous(limits = c(-100, 80), breaks=seq(-100, 80, 10), expand = c(0,0)) +
#scale_x_discrete(labels=c("Baseline", "Follow-up")) +
#stat_summary(fun.y = mean, geom = "bar", position = "dodge", colour = "black", alpha =0.5) +
#stat_summary(aes(y = Strength,group=1), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(fun.y = mean, geom = "point", position = "dodge", colour = "firebrick", alpha = 0.6, size = 3) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", position = position_dodge(width = 0.90), width = 0.05) +
#geom_line(position = pd, alpha=0.1, color = "black", size = 1) +
#geom_point(position = pd, alpha = 0.1, color = "black") +
labs(x = "Bedingung", y = "Cholesterinwert Veränderung mg/dl")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, geom = "rect", alpha = 0.2, fill = "darkgreen")+
#annotate(xmin = -Inf, xmax = Inf, ymin = Mv-halfCI_v, ymax = Mv+halfCI_v, geom = "rect", alpha = 0.2, fill = "blue")+
annotate(geom = "hline",yintercept = 0, y = 0, color = "red")
#annotate("pointrange", x = 1, y = Mnv, ymin = Mnv-halfCI_nv, ymax = Mnv+halfCI_nv, colour = "darkgreen", size = 0.8, shape = 15)
g
markdown::render_site()
markdown::rendersite()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# packages
library(ez)
library(reshape2)
library(reshape)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(overlapping) # to compute the
# show the corresponding graph
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
# condition incongruent
# define parameters for the Gamma distributions
mean_short <- 6000
mean_long <- mean_short * 3
var_small <- 40000
var_large <- var_small * 160
scale_func <- function(mean, variance) {
scale <- mean/variance
return(scale)
}
scale1 <- scale_func(var_small,mean_short)
scale2 <- scale_func(var_small,mean_long)
scale3 <- scale_func(var_large,mean_short)
scale4 <- scale_func(var_large,mean_long)
shape_func <- function(mean, scale) {
shape <- mean/scale
return(shape)
}
shape1 <- shape_func(mean_short,scale1)
shape2 <- shape_func(mean_long,scale2)
shape3 <- shape_func(mean_short,scale3)
shape4 <- shape_func(mean_long,scale4)
# show the corresponding graph
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
out <- overlap(x,plot=FALSE)
plot1 = final.plot(x,out$OV)
plot1
# packages
library(ez)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(overlapping) # to compute the
library(tidyr)
library(showtext)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
svg(filename="latencies.svg",
width=5,
height=4,
pointsize=12)
theme_set(theme_light(base_size = 13, base_family = "Poppins"))
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
out <- overlap(x,plot=TRUE)
plot1 = final.plot(x,out$OV)
plot1
dev.off()
svg(filename="latencies.svg",
width=8,
height=4,
pointsize=12)
theme_set(theme_light(base_size = 13, base_family = "Poppins"))
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
out <- overlap(x,plot=TRUE)
plot1 = final.plot(x,out$OV)
plot1
dev.off()
svg(filename="latencies.svg",
width=10,
height=4,
pointsize=12)
theme_set(theme_light(base_size = 13, base_family = "Poppins"))
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
out <- overlap(x,plot=TRUE)
plot1 = final.plot(x,out$OV)
plot1
dev.off()
svg(filename="latencies.svg",
width=11,
height=5,
pointsize=11)
theme_set(theme_light(base_size = 13, base_family = "Poppins"))
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
out <- overlap(x,plot=TRUE)
plot1 = final.plot(x,out$OV)
plot1
dev.off()
svg(filename="latencies.svg",
width=10,
height=4,
pointsize=11)
theme_set(theme_light(base_size = 13, base_family = "Poppins"))
x <- seq(0, 10000, 1) # define a large array for rand. deviates (ensures that the sampled distribution converges with the PDF)
set.seed(20150605)
x <- list(G1=rgamma(x, scale = scale1, shape = shape1),
G2=rgamma(x, scale = scale2, shape = shape2),
G3=rgamma(x, scale = scale3, shape = shape3),
G4=rgamma(x, scale = scale4, shape = shape4))
out <- overlap(x,plot=TRUE)
plot1 = final.plot(x,out$OV)
plot1
dev.off()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# read data
tdata <- read.delim("tdata_final.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# Demographics
demogr_data <- tdata[!duplicated(tdata$sID), ]
mean(demogr_data$Age)
sd(demogr_data$Age)
min(demogr_data$Age)
max(demogr_data$Age)
table(demogr_data$Sex)
count(demogr_data, c("Query"))
# packages
library(ez)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(overlapping) # to compute the
library(tidyr)
library(showtext)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
# read data
tdata <- read.delim("tdata_final.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# Demographics
demogr_data <- tdata[!duplicated(tdata$sID), ]
mean(demogr_data$Age)
sd(demogr_data$Age)
min(demogr_data$Age)
max(demogr_data$Age)
table(demogr_data$Sex)
count(demogr_data, c("Query"))
# declare factors and their levels
tdata$Preventer <- factor(tdata$Preventer, levels = c("sufficient", "necessary"), labels = c("Sufficient preventer", "Necessary preventer"))
tdata$Query <- factor(tdata$Query, levels = c("strength", "singular"), labels = c("test query: preventive strength", "test query: singular prevention"))
tdata$DataSet <- factor(tdata$DataSet, levels = c("a", "b", "c", "d"), labels = c("a", "b", "c", "d"))
count(tdata, c("Preventer", "Query", "DataSet"))
# make subsets for the different dvs
tdata_rating <- tdata[c(1:4,6)]
#tdata_strength <-  tdata_strength %>% gather(Entity, Strength, g1:g3, factor_key=TRUE)
rmarkdown::render_delayed()
rmarkdown::render_site()
rmarkdown::render_site()
# packages
library(ez)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(overlapping) # to compute the
library(tidyr)
library(showtext)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
# read data
tdata <- read.delim("tdata_final.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# Demographics
demogr_data <- tdata[!duplicated(tdata$sID), ]
mean(demogr_data$Age)
sd(demogr_data$Age)
min(demogr_data$Age)
max(demogr_data$Age)
table(demogr_data$Sex)
count(demogr_data, c("Query"))
# declare factors and their levels
tdata$Preventer <- factor(tdata$Preventer, levels = c("sufficient", "necessary"), labels = c("Sufficient preventer", "Necessary preventer"))
tdata$Query <- factor(tdata$Query, levels = c("strength", "singular"), labels = c("test query: preventive strength", "test query: singular prevention"))
tdata$DataSet <- factor(tdata$DataSet, levels = c("a", "b", "c", "d"), labels = c("a", "b", "c", "d"))
count(tdata, c("Preventer", "Query", "DataSet"))
# make subsets for the different dvs
tdata_rating <- tdata[c(1:4,6)]
#tdata_strength <-  tdata_strength %>% gather(Entity, Strength, g1:g3, factor_key=TRUE)
rmarkdown::render_site()
